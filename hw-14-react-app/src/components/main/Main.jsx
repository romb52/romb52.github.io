import styles from './Main.module.css';


const Main = () => {    
    return (
        <main>
            <div className={`container ${styles.mainwrap}`} >
                <h2>Бьерн Страуструп. Мова програмування C++</h2>
                <h3>Парадигми програмування</h3>
                <p>Об'єктно-орієнтоване програмування - це метод програмування, спосіб написання "добрих" програм для багатьох завдань. Якщо цей термін має який-небудь сенс, то він повинен передбачати таку мову програмування, яка надає хороші можливості для об'єктно-орієнтованого стилю програмування.</p>
                <p>Тут слід вказати на важливі відмінності. Говорять, що мова підтримує певний стиль програмування, якщо в ній є такі можливості, які роблять програмування в цьому стилі зручним (достатньо простим, надійним і ефективним). Мова не підтримує певний стиль програмування, якщо потрібні великі зусилля або навіть мистецтво, щоб написати програму в цьому стилі. Проте це не означає, що мова забороняє писати програми в цьому стилі. Зазвичай можна писати структурні програми на Fortran та об'єктно-орієнтовані програми на C, але це буде порожнім витратою сил, оскільки ці мови не підтримують вказаних стилів програмування.</p>
                <p>Підтримка мовою певної парадигми (стилю) програмування явно проявляється в конкретних мовних конструкціях, призначених для цього. Проте це може виявлятися більш тонкою, прихованою формою, коли відхилення від парадигми діагностується на етапі трансляції або виконання програми. Найочевидніший приклад - це контроль типів. Крім того, мовна підтримка парадигми може доповнюватися перевіркою на однозначність та динамічним контролем. Підтримка може надаватися і поза межами самої мови, наприклад, стандартними бібліотеками чи середовищем програмування.</p>
                <p>Неможливо сказати, що одна мова краща за іншу лише тому, що в ній є можливості, яких немає в іншій. Часто саме навпаки. Тут важливіше не те, якими можливостями володіє мова, а те, наскільки наявні в ній можливості підтримують обраний стиль програмування для певного кола завдань. Тому можна сформулювати наступні вимоги до мови:
                    Всі конструкції мови повинні природно і елегантно визначатися в ній.
                    Для вирішення певної задачі повинна бути можливість використовувати комбінації конструкцій, щоб уникнути необхідності вводити для цієї мети нову конструкцію.
                    Має бути мінімальна кількість неочевидних конструкцій спеціального призначення.
                    Конструкція повинна допускати таку реалізацію, щоб в невикористовуючій її програмі не виникло додаткових витрат.
                    Користувачеві досить знати тільки те множину конструкцій, яке безпосередньо використовується в його програмі.
                    Перше вимога апелює до логіки та естетики. Два наступні виражають принцип мінімальності. Два останні можна інакше сформулювати так: "того, чого ви не знаєте, не зможе завдати вам шкоди".
                    З урахуванням обмежень, зазначених в цих правилах, мова C++ проектувалася для підтримки абстракції даних та об'єктно-орієнтованого програмування, додатково до традиційного стилю С. Проте це не означає, що мова вимагає якого-небудь одного стилю програмування від усіх користувачів.
                    Тепер перейдемо до конкретних стилів програмування і подивимося, які основні конструкції мови їх підтримують. Ми не збираємося надавати повного опису цих конструкцій.</p>
            </div>
        </main>
    )
}
export default Main;